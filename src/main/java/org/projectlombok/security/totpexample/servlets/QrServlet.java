package org.projectlombok.security.totpexample.servlets;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.projectlombok.security.totpexample.Session;
import org.projectlombok.security.totpexample.SessionStore;
import org.projectlombok.security.totpexample.Totp;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

/**
 * This servlet serves up the QR code image which a TOTP device can scan to ease the transfer of the secret key between the server and the device.
 * 
 * Note that you MUST include this servlet inside your own server; letting the QR code be generated by a third party neccessitates that you tell this third party
 * the secret TOTP key which defeats the purpose of the TOTP verification mechanism!
 * 
 * The key is not placed directly in the URL or even a {@code POST} form submit, as these things tend to get stuck in browser histories, caches of proxies, etc;
 * a short-lived session is used instead.
 */
public class QrServlet extends HttpServlet {
	private final SessionStore sessions;
	
	public QrServlet(SessionStore sessions) {
		this.sessions = sessions;
	}	
	
	@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		Session session = sessions.get(request.getParameter("key"));
		byte[] qrCodeImage = generateQrCodeForUri(session.getOrDefault(Totp.SESSIONKEY_URI, "https://www.google.com/search?tbm=isch&q=failed"));
		
		response.setContentType("image/png");
		
		// SECURITY NOTE: This Cache-Control header is not 'nice-to-have'. IT IS A REQUIREMENT.
		response.addHeader("Cache-Control", "no-store");
		
		try (OutputStream out = response.getOutputStream()) {
			out.write(qrCodeImage);
		}
		
		/*
			SECURITY NOTE:
			
			The URL of this image really shouldn't end up anywhere that an unauthorized user gets to see it, but if it does happen, they can use that URL to fetch
			the image, which is a security leak. For this reason it is worth considering wiping the Totp.SESSIONKEY_URI element from the session.
			
			However, the sessions are short lived (1 hour, to account for a user having to charge a phone, download a TOTP app, fix the current time, etcetera),
			and some browsing scenarios involve loading the same image more than once, which would break the signup process for the user.
			
			We've decided not to wipe the Totp.SESSIONKEY_URI entry.
		*/
	}
	
	private byte[] generateQrCodeForUri(String uri) {
		try {
			ByteArrayOutputStream stream = new ByteArrayOutputStream();
			BitMatrix matrix = new QRCodeWriter().encode(uri, BarcodeFormat.QR_CODE, 200, 200);
			MatrixToImageWriter.writeToStream(matrix, "PNG", stream);
			return stream.toByteArray();
		} catch (IOException | WriterException e) {
			// Given that this operation is entirely in memory, any such exceptions are indicative of bad input.
			throw new IllegalArgumentException("Invalid URI", e);
		}
	}
}
