package org.projectlombok.security.totpexample.servlets;

import java.io.IOException;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.projectlombok.security.totpexample.Session;
import org.projectlombok.security.totpexample.SessionStore;
import org.projectlombok.security.totpexample.Totp;
import org.projectlombok.security.totpexample.Totp.TotpData;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;

/**
 * This servlet serves the page to troubleshoot a logging user's TOTP device by asking for 3 codes. It can reset lockouts and report on timeskews up to a day either way.
 * 
 * You get here from the {@link LoginServlet}, and the submissions to the form generated by this servlet are handled by {@link ConfirmTotpLoginServlet}.
 */
public class TroubleshootTotpServlet extends HttpServlet {
	// SECURITY NOTE: TODO - explain this in some more detail.
	private static final long DEFAULT_TIME_TO_LIVE = TimeUnit.MINUTES.toMillis(30);
	
	private final SessionStore sessions;
	private final Template troubleshootTotpTemplate;
	private final Totp totp;
	
	public TroubleshootTotpServlet(Configuration templates, SessionStore sessions, Totp totp) throws IOException {
		this.troubleshootTotpTemplate = templates.getTemplate("troubleshootTotp.html");
		this.sessions = sessions;
		this.totp = totp;
	}
	
	@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		Session session = sessions.get(request.getParameter("si"));
		String username = "";
		if (session != null) {
			username = session.getOrDefault("username", "");
		}
		
		if (username.isEmpty()) {
			error(request, response, "Your session has expired; please log in again.");
			return;
		}
		
		TotpData totpData = totp.startCheckTotp(username);
		renderPage(response, session, totpData);
	}
	
	private void renderPage(HttpServletResponse response, Session session, TotpData totpData) throws IOException, ServletException {
		Map<String, Object> root = new HashMap<>();
		root.put("key", session.getSessionKey());
		String error = session.getOrDefault("errMsg", "");
		if (!error.isEmpty()) {
			root.put("errMsg", error);
		}
		
		root.put("correctTotpCode", SetupTotpServlet.calculateCode(totpData.getSecret(), 0L));
		root.put("correctTotpCode2", SetupTotpServlet.calculateCode(totpData.getSecret(), 1L));
		root.put("correctTotpCode3", SetupTotpServlet.calculateCode(totpData.getSecret(), 2L));
		
		root.put("skewedTotpCode", SetupTotpServlet.calculateCode(totpData.getSecret(), 300L));
		root.put("skewedTotpCode2", SetupTotpServlet.calculateCode(totpData.getSecret(), 301L));
		root.put("skewedTotpCode3", SetupTotpServlet.calculateCode(totpData.getSecret(), 302L));
		response.setContentType("text/html; charset=UTF-8");
		try (Writer out = response.getWriter()) {
			troubleshootTotpTemplate.process(root, out);
		} catch (TemplateException e) {
			throw new ServletException("Template broken: troubleshootTotp.html", e);
		}
	}
	
	private void error(HttpServletRequest request, HttpServletResponse response, String message) throws IOException {
		Session session = sessions.create(DEFAULT_TIME_TO_LIVE);
		session.put("errMsg", message);
		response.sendRedirect("/login?si=" + session.getSessionKey());
	}
}
